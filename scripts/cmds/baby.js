const axios = require('axios');
const baseApiUrl = async () => {
    return "https://noobs-api.top/dipto";
};

module.exports.config = {
    name: "bby",
    aliases: ["baby", "bbe", "babe", "sam", "bot", "chat", " makima"],
    version: "6.9.0",
    author: "dipto | sazzad_here",
    countDown: 0,
    role: 0,
    description: "better than all sim simi",
    category: "chat",
    guide: {
        en: "{pn} [anyMessage] OR\nteach [YourMessage] - [Reply1], [Reply2], [Reply3]... OR\nteach [react] [YourMessage] - [react1], [react2], [react3]... OR\nremove [YourMessage] OR\nrm [YourMessage] - [indexNumber] OR\nmsg [YourMessage] OR\nlist OR \nall OR\nedit [YourMessage] - [NewMessage]"
    }
};

module.exports.onStart = async ({ api, event, args, usersData }) => {
    const link = `${await baseApiUrl()}/baby`;
    const dipto = args.join(" ").toLowerCase();
    const uid = event.senderID;
    let command, comd, final;

    try {
        if (!args[0]) {
            const ran = ["Bolo baby", "hum", "type help baby", "type !baby hi"];
            return api.sendMessage(ran[Math.floor(Math.random() * ran.length)], event.threadID, event.messageID);
        }

        if (args[0] === 'remove') {
            const fina = dipto.replace("remove ", "");
            const dat = (await axios.get(`${link}?remove=${encodeURIComponent(fina)}&senderID=${uid}`)).data.message;
            return api.sendMessage(dat, event.threadID, event.messageID);
        }

        if (args[0] === 'rm' && dipto.includes('-')) {
            const [fi, f] = dipto.replace("rm ", "").split(/\s*-\s*/);
            const da = (await axios.get(`${link}?remove=${encodeURIComponent(fi)}&index=${f}`)).data.message;
            return api.sendMessage(da, event.threadID, event.messageID);
        }

        if (args[0] === 'list') {
            if (args[1] === 'all') {
                const data = (await axios.get(`${link}?list=all`)).data;
                const limit = parseInt(args[2]) || 100;
                const limited = data?.teacher?.teacherList?.slice(0, limit);
                const teachers = await Promise.all(limited.map(async (item) => {
                    const number = Object.keys(item)[0];
                    const value = item[number];
                    const name = await usersData.getName(number).catch(() => number) || "Not found";
                    return { name, value };
                }));
                teachers.sort((a, b) => b.value - a.value);
                const output = teachers.map((t, i) => `${i + 1}/ ${t.name}: ${t.value}`).join('\n');
                return api.sendMessage(`Total Teach = ${data.length}\nЁЯСС | List of Teachers of baby\n${output}`, event.threadID, event.messageID);
            } else {
                const d = (await axios.get(`${link}?list=all`)).data;
                return api.sendMessage(`тЭЗя╕П | Total Teach = ${d.length || "api off"}\nтЩ╗я╕П | Total Response = ${d.responseLength || "api off"}`, event.threadID, event.messageID);
            }
        }

        if (args[0] === 'msg') {
            const fuk = dipto.replace("msg ", "");
            const d = (await axios.get(`${link}?list=${encodeURIComponent(fuk)}`)).data.data;
            return api.sendMessage(`Message ${fuk} = ${d}`, event.threadID, event.messageID);
        }

        if (args[0] === 'edit') {
            const parts = dipto.split(/\s*-\s*/);
            if (parts.length < 2) return api.sendMessage('тЭМ | Invalid format! Use edit [YourMessage] - [NewReply]', event.threadID, event.messageID);
            const dA = (await axios.get(`${link}?edit=${encodeURIComponent(args[1])}&replace=${encodeURIComponent(parts[1])}&senderID=${uid}`)).data.message;
            return api.sendMessage(`changed ${dA}`, event.threadID, event.messageID);
        }

        if (args[0] === 'teach' && args[1] === 'react') {
            const parts = dipto.replace("teach react ", "").split(/\s*-\s*/);
            if (parts.length < 2) return api.sendMessage('тЭМ | Invalid format! Use: teach react message - тЭдя╕П, ЁЯША', event.threadID, event.messageID);
            const msg = parts[0].trim();
            const reacts = parts[1].trim();
            const res = await axios.get(`${link}?teach=${encodeURIComponent(msg)}&react=${encodeURIComponent(reacts)}`);
            return api.sendMessage(`тЬЕ Reacts added: ${res.data.message}`, event.threadID, event.messageID);
        }

        if (args[0] === 'teach' && args[1] === 'amar') {
            const parts = dipto.split(/\s*-\s*/);
            if (parts.length < 2) return api.sendMessage('тЭМ | Invalid format! Use: teach amar message - reply', event.threadID, event.messageID);
            const msg = parts[0].replace("teach amar ", "").trim();
            const reply = parts[1].trim();
            const res = await axios.get(`${link}?teach=${encodeURIComponent(msg)}&senderID=${uid}&reply=${encodeURIComponent(reply)}&key=intro`);
            return api.sendMessage(`тЬЕ Intro reply added: ${res.data.message}`, event.threadID, event.messageID);
        }

        if (args[0] === 'teach' && args[1] !== 'amar' && args[1] !== 'react') {
            const parts = dipto.split(/\s*-\s*/);
            if (parts.length < 2) return api.sendMessage('тЭМ | Invalid format! Use: teach message - reply1, reply2', event.threadID, event.messageID);
            const msg = parts[0].replace("teach ", "").trim();
            const replies = parts[1].trim();
            const res = await axios.get(`${link}?teach=${encodeURIComponent(msg)}&reply=${encodeURIComponent(replies)}&senderID=${uid}&threadID=${event.threadID}`);
            const teacherName = (await usersData.get(res.data.teacher)).name || "Unknown";
            return api.sendMessage(`тЬЕ Replies added: ${res.data.message}\nЁЯСд Teacher: ${teacherName}\nЁЯУЪ Total Teachs: ${res.data.teachs}`, event.threadID, event.messageID);
        }

        if (dipto.includes('amar name ki') || dipto.includes('amr nam ki') || dipto.includes('amar nam ki') || dipto.includes('amr name ki') || dipto.includes('whats my name')) {
            const data = (await axios.get(`${link}?text=${encodeURIComponent("amar name ki")}&senderID=${uid}&key=intro`)).data.reply;
            return api.sendMessage(data, event.threadID, event.messageID);
        }

        const d = (await axios.get(`${link}?text=${encodeURIComponent(dipto)}&senderID=${uid}`)).data.reply;
        api.sendMessage(d, event.threadID, (error, info) => {
            global.GoatBot.onReply.set(info.messageID, {
                commandName: this.config.name,
                type: "reply",
                messageID: info.messageID,
                author: event.senderID,
                d,
                apiUrl: link
            });
        }, event.messageID);

    } catch (e) {
        console.log(e);
        api.sendMessage("Check console for error", event.threadID, event.messageID);
    }
};

module.exports.onReply = async ({ api, event, Reply }) => {
    try {
        if (event.type == "message_reply") {
            const a = (await axios.get(`${await baseApiUrl()}/baby?text=${encodeURIComponent(event.body?.toLowerCase())}&senderID=${event.senderID}`)).data.reply;
            await api.sendMessage(a, event.threadID, (error, info) => {
                global.GoatBot.onReply.set(info.messageID, {
                    commandName: this.config.name,
                    type: "reply",
                    messageID: info.messageID,
                    author: event.senderID,
                    a
                });
            }, event.messageID);
        }
    } catch (err) {
        return api.sendMessage(`Error: ${err.message}`, event.threadID, event.messageID);
    }
};

module.exports.onChat = async ({ api, event, message }) => {
    try {
        const body = event.body ? event.body.toLowerCase() : "";
        if (body.startsWith("baby") || body.startsWith("bby") || body.startsWith("bot") || body.startsWith("jan") || body.startsWith("babu") || body.startsWith("janu")) {
            const arr = body.replace(/^\S+\s*/, "");
            const randomReplies = ["╩Щс┤П╩Я ЁЯР╕", "╩Щс┤П╩Я sс┤Ь╔┤с┤Ыс┤Зс┤Д╩Ь╔к ЁЯРН", "с┤Ес┤Ас┤Л╔кs с┤Лс┤З╔┤ ЁЯШ╛?", "╩Щс┤П╩Яс┤П с┤Кс┤Ас┤А╔┤ с┤Л╔к с┤Лс┤П╩Ас┤Ыс┤З с┤Шс┤А╩А╔к с┤Ыс┤Пс┤Нс┤А╩А с┤Кс┤П╔┤╔┤с┤П ЁЯШЮ", "ржПрждрзЛ ржбрж╛ржХржЫрж┐рж╕ ржХрзЗржи? ржЧрж╛рж▓рж┐ рж╢рзБржиржмрж┐ ржирж╛ржХрж┐ЁЯШ╛?", "ржмржЯ ржмрж▓рзЗ ржЕрж╕ржорзНржорж╛ржи ржХрж░ржЫрж┐рж╕ ЁЯШн?", "╩Щс┤Пс┤Лс┤Ас┤Дс┤Пс┤Ес┤А с┤Л╔к ╩Ьс┤П╔кс┤Д╩Ьс┤З ╩Щс┤П╩Я ЁЯШб?", "ржЖржорж╛ржХрзЗ ржирж╛ ржбрзЗржХрзЗ, ржмрж╕ рж╕рж╛ржЬрзНржЬрж╛ржж ржХрзЗ ржПржХржЯрж╛ ╔вс┤П╥У╥Ус┤З╔┤ ржжрзЗ ЁЯШЮЁЯл╢?", "ржнрж╛рж▓рзЛржмрж╛рж╕рж╛ ржирж╛ржоржХ ржЖржмрзНрж▓рж╛ржорж┐ ржХрж░рждрзЗ ржЪрж╛ржЗрж▓рзЗ ржмрж╕ рж╕рж╛ржЬрзНржЬрж╛ржж ржПрж░ ржЗржиржмржХрзНрж╕рзЗ ржпрж╛ЁЯШ╛?", "sс┤А╩Яс┤Ас┤Н с┤Ес┤З ╩Щс┤Зс┤Ыс┤А ЁЯСН", "╩Ьс┤Ь╩Щ╩Щ╩П ржбрж╛ржХрждрзЗ рж▓ржЬрзНржЬрж╛ рж▓рж╛ржЧрзЗ? ЁЯз╕", "ржЖржорж╛ржХрзЗ ржбрзЗржХрзЛ ржирж╛ ЁЯМЪ", "с┤Ыс┤Пс┤Нс┤А╩А ╔┤с┤А╔┤╔к╩А sс┤Ас┤бс┤бс┤А ЁЯЧ┐", "с┤Ш╩Ас┤Зс┤Н с┤Лс┤П╩А╩Щ╔к? ЁЯлв", "ржмрзНрж▓рзНржпрж╛ржХржорзЗржЗрж▓ ржХрж░ржмрж┐ ржирж╛ ЁЯШ┐?", "╩Щс┤Пс┤Ы ржирж╛ ржмрж▓рзЗ с┤А╩Щ╩Щс┤Ь ржбрж╛ржХ ЁЯШ╛?", "╩Щ╩Щ╩П ЁЯСА?", "ржЙржл ржмрзБржЭрж▓рж╛ржо ржирж╛ ржПрждрзЛ с┤Ес┤Ас┤Лс┤П ржХрзЗржи? ЁЯШл", "с┤б╩Ьс┤Ас┤Ы's с┤Ьс┤Ш? ", "ржЖржорж┐ ржЖржмрж╛рж▓ ржжрзЗрж░ рж╕рж╛ржерзЗ ржХржерж╛ ржмрж▓рж┐ ржирж╛ ЁЯе▒", "с┤Ьс┤Нс┤Нс┤Нс┤Ас┤Ас┤А╩Ь╩Ь sс┤Зx╩П ╩Щ╩Щ╩П!ЁЯТЛ", "с┤Шс┤П╩Ас┤Ыс┤З ╩Щс┤Пs ЁЯлж", "с┤З╔к с┤К sс┤Ь╔┤с┤Ес┤П╩А╔к с┤Л╔к ╩Ьс┤П╔кс┤Д╩Ьс┤З ╩Щс┤П╩Яс┤П! ЁЯЩИ", "с┤Ыс┤Пс┤Нс┤А╩А ╔┤с┤А╔┤╔к с┤Л с┤ас┤А╩Яс┤П╩Щс┤Аs╩Ь╔к ! ЁЯлв", " ╩Щс┤П╩Яс┤П ╩Щс┤П╔┤с┤Ес┤Ь с┤Л╔к с┤Лс┤П╩Ас┤Ыс┤З с┤Шс┤А╩А╔к с┤Ыс┤Пс┤Нс┤А╩А с┤Кс┤П╔┤╔┤с┤П? ЁЯМ╖ЁЯТи", "╩Щ╩Щ╩П с┤Зс┤Лс┤Ыс┤А с┤Л╔кss╩П с┤Е╔к╩Щс┤А? ЁЯШЕЁЯЩК", "с┤Ас┤Н╔к с┤Д╩Ьс┤Пс┤Ыс┤Ыс┤П ╩Щ╩Щ╩П ╩Щс┤П╩Яс┤З с┤Ас┤Нс┤Ас┤Лс┤З ╔вс┤А╩Я╔к с┤Е╔к╩Яс┤А? ЁЯШЮ", "с┤Ыс┤Пс┤Нс┤Ас┤Лс┤З с┤Ш╩Ас┤Пс┤Шс┤Пsс┤З с┤Лс┤П╩А╩Яс┤З ╩Ас┤А╔в с┤Лс┤П╩А╩Щс┤А ЁЯдн?", "с┤Ыс┤Ьс┤Н╔к с┤Кс┤Пс┤Л╩Ь╔┤ с┤Ас┤Нс┤Ас┤Лс┤З с┤Ес┤Ас┤Лс┤П с┤Ас┤Нс┤А╩А с┤Лс┤П╩Я╔кс┤вс┤А с┤Лс┤Зс┤Шс┤З с┤Ьс┤Ы╩Ьс┤З -! ЁЯШЪ", " ржЖржЗржЫрзЗ ╩Щс┤Пс┤Лс┤Аxс┤Пс┤Ес┤АЁЯдХ", "с┤Зс┤Ыс┤Ыс┤П ╩Щ╩Щ╩П ╩Щ╩Щ╩П с┤Ес┤Ас┤Л╩Яс┤З с┤Ш╩Ас┤Зс┤Н с┤З с┤Шс┤П╩Ас┤З с┤Кс┤А╩Щс┤П с┤Ыс┤ПЁЯлг", " с┤Ас┤бс┤бс┤б- ржерзБржорж┐ ржЖрж╕ржЫрзЛ xс┤А╔┤", "╩Щс┤П╩Яс┤П ржПрждрзЛржЦржи с┤Ыс┤Пс┤Нс┤А╩А с┤Пс┤Шс┤Зс┤Лс┤Л╩Ьс┤А╩П ржЫрж┐рж▓рж╛ржоЁЯе╣", "с┤Ыс┤Ьс┤Н╔к с┤Ас┤Нс┤А╩А ╩Я╔кс┤Ыс┤Ы╩Яс┤З sс┤Ыс┤А╩А ЁЯМЯЁЯШП", "с┤Ыс┤Ьс┤Н╔к с┤Ас┤Нс┤А╩А с┤Н╔кsс┤Д╩Ь╔кс┤Зс┤ас┤Пс┤Ьs ╩Щ╩Щ╩П ЁЯШ╝ЁЯТл", "с┤Ыс┤Ьс┤Н╔к с┤Ас┤Нс┤А╩А sс┤Н╔к╩Яс┤З с┤З╩А ╩Ас┤Зс┤Аsс┤П╔┤ ЁЯШНтЬи", "с┤Ыс┤Ьс┤Н╔к с┤Ас┤Нс┤А╩А sс┤Зс┤Д╩Ас┤Зс┤Ы ╩Ьс┤Ас┤Шс┤Ш╔к╔┤с┤Зss ЁЯШШЁЯТЦ ", "с┤Ыс┤Ьс┤Н╔к с┤Ас┤Нс┤А╩А ╩Ьс┤Зс┤А╩Ас┤Ы с┤З╩А с┤а╔кс┤Ш тЭдя╕ПЁЯШП ", "с┤Ыс┤Ьс┤Н╔к с┤Ас┤Нс┤А╩А ╩Я╔к╩Я с┤Ы╩Ас┤Пс┤Ь╩Щ╩Яс┤З с┤Нс┤Ас┤Лс┤З╩А ЁЯР╕ЁЯШЭ", "с┤Ыс┤Ьс┤Н╔к с┤Ас┤Нс┤А╩А с┤Д╩Ьс┤Пс┤Дс┤П╩Яс┤Ас┤Ыс┤З с┤З╩А sс┤бс┤Зс┤Зс┤Ы╔┤с┤Зss ЁЯНлЁЯШ╗", "с┤Ыс┤Ьс┤Н╔к с┤Ас┤Нс┤А╩А sс┤Ь╔┤s╩Ь╔к╔┤с┤З тШАя╕ПЁЯМ╕", "с┤Ыс┤Ьс┤Н╔к с┤Ас┤Нс┤А╩А с┤Дс┤Ьс┤Ес┤Е╩Яс┤З ╩Щс┤Ьс┤Ес┤Е╩П ЁЯШ╜ЁЯРе", "с┤Ыс┤Ьс┤Н╔к с┤Ас┤Нс┤А╩А с┤Кс┤П╩П с┤З╩А ╩Ас┤Зс┤Аsс┤П╔┤ ЁЯШЗЁЯТл ", "с┤Ыс┤Ьс┤Н╔к с┤Ас┤Нс┤А╩А ╩Ас┤А╩Ас┤З ╔вс┤Зс┤Н ЁЯТОЁЯШП", "с┤Ыс┤Ьс┤Н╔к с┤Ас┤Нс┤А╩А ╩Я╔к╩Я с┤Нс┤А╔в╔кс┤Д тЬиЁЯШ╗", "с┤Ыс┤Ьс┤Н╔к с┤Ас┤Нс┤А╩А sс┤Н╔к╩Яс┤З с┤Д╩Ьс┤А╩Ас┤А с┤Е╔к╔┤ ╔к╔┤с┤Дс┤Пс┤Нс┤Ш╩Яс┤Зс┤Ыс┤З ЁЯШЭЁЯТЦ", "с┤Ыс┤Ьс┤Н╔к с┤Ас┤Нс┤А╩А ╩Я╔кс┤Ыс┤Ы╩Яс┤З ╔┤с┤Ас┤Ь╔в╩Ьс┤Ы╩П с┤А╔┤╔вс┤З╩Я ЁЯШ╝ЁЯФе", "с┤Ыс┤Ьс┤Н╔к с┤Ас┤Нс┤А╩А ╥Ус┤П╩Ас┤Зс┤ас┤З╩А ╩Яс┤Пс┤ас┤З тЭдя╕ПЁЯТл", "с┤Ыс┤Ьс┤Н╔к с┤Ас┤Нс┤А╩А ╩Ьс┤Зс┤А╩Ас┤Ы sс┤Ыс┤Зс┤А╩Я с┤Лс┤П╩А╩Яс┤З ╩Щ╩Ьс┤А╩Яс┤П ╩Ьс┤Пс┤Ыс┤П ЁЯШПЁЯТЦ", "с┤Ыс┤Ьс┤Н╔к с┤Ас┤Нс┤А╩А ╩Я╔к╩Я с┤Ыс┤Зс┤Аsс┤З ЁЯШШЁЯлг", "с┤Ыс┤Ьс┤Н╔к с┤Ас┤Нс┤А╩А с┤Е╔к╔┤ ╩Щ╩А╔к╔в╩Ьс┤Ы с┤Лс┤П╩Ас┤П ЁЯМЮтЬи", "с┤Ыс┤Ьс┤Н╔к с┤Ас┤Нс┤А╩А ╩Я╔к╩Я с┤Дс┤Ьс┤Ы╔кс┤З ЁЯШ╗ЁЯТЦ", "с┤Ыс┤Ьс┤Н╔к с┤Ас┤Нс┤А╩А с┤Зс┤ас┤З╩А╩Пс┤Ы╩Ь╔к╔┤╔в ЁЯШПЁЯТл", "с┤Ыс┤Ьс┤Нс┤А╩Ас┤З с┤Ас┤Н╔к ╩Ас┤А╔кс┤Ыс┤З ╩Щ╩Ьс┤А╩Яс┤П╩Щс┤Аs╔к ЁЯР╕ЁЯУМ", "с┤Ас┤Нс┤А╩А с┤Зxс┤Ас┤Н с┤Ас┤Н╔к с┤Шс┤П╩Ас┤Ыс┤Аs╔к ЁЯРв", "с┤Нс┤П╩Ас┤З ╔вс┤Зs╔к с┤Лс┤А╩Ас┤П╔┤ с┤Ыс┤Пс┤Нс┤Ас┤Лс┤З с┤Д╩Ьс┤А╩Ас┤А с┤Ас┤Н╔к ╩Щс┤Ас┤Дс┤Нс┤Ь ╔┤с┤А", "╔в╥У с┤а╩Ьс┤З╩Щс┤З с┤Зс┤Лс┤Ыс┤Ь s╩Ьс┤Аs╩Ьс┤П╔┤ с┤Лс┤П╩Ас┤З с┤Кс┤Ас┤П!ЁЯР╕", "с┤А╔вс┤З с┤Зс┤Лс┤Ыс┤Ь ╔вс┤А╔┤ ╩Щс┤П╩Яс┤П,тШ╣╔┤с┤А╩Ьс┤П╩Яс┤З с┤Лс┤Пс┤Ы╩Ьс┤А ╩Щс┤П╩Я╩Щс┤П ╔┤с┤А_ЁЯе║", "с┤З╔к с┤З╔к с┤Ыс┤П╩А с┤Ш╩А╔кс┤Лс┤Л╩Ьс┤А с┤Лс┤П╩Щс┤З ? sс┤Ьс┤Е╩Ьс┤Ь b╩Щ╩П b╩Щ╩П с┤Лс┤П╩А╔кs", "с┤Ас┤Н╔к с┤Лс┤А╔┤с┤А ╔┤с┤А sс┤Ь╔┤с┤Д╩Ь╔к ,╩Щс┤П╩Яс┤П с┤Л╔к ╩Щс┤П╩Я╩Щс┤А", "с┤А╩А с┤Лс┤Пс┤Ыс┤П ╩Щс┤А╩А с┤Ес┤Ас┤Л╩Щ╔к , sс┤Ь╔┤с┤Д╩Ь╔к с┤Ыс┤П ЁЯРв", "с┤Ас┤Н╔к с┤П╔┤╔┤с┤З╩А с┤К╔к╔┤╔кs с┤З╩А sс┤Ас┤Ы╩Ьс┤З с┤Лс┤Пс┤Ы╩Ьс┤А ╩Щс┤П╩Я╔к ╔┤с┤А с┤Пс┤Лс┤Лс┤З__ЁЯШП", "с┤Ас┤Н╔к с┤Ыс┤Пс┤Нс┤А╩А sс┤З╔┤╔кс┤П╩А с┤Ас┤Шс┤ЬЁЯШ╝sс┤Пс┤Нс┤Нс┤А╔┤ с┤Ес┤Зс┤ПЁЯЩБ", "с┤Ас┤К с┤Зс┤Лс┤Ыс┤А с┤Ш╩Ьс┤П╔┤ ╔┤с┤А╔к ╩Щс┤П╩Яс┤З╩П ╩Ас┤Зс┤Ш╩Яс┤А╩П с┤Е╔кс┤Ыс┤З с┤Шс┤А╩А╩Яс┤Ас┤Н ╔┤с┤А_ЁЯЩД", "╩Щс┤П╩Яс┤П с┤Л╔к ╩Щс┤П╩Я╩Щс┤А, sс┤П╩Щс┤А╩А sс┤Ас┤Н╔┤с┤З ╩Щс┤П╩Я╩Щс┤А ╔┤с┤Ас┤Л╔к?ЁЯднЁЯдП", "с┤А╩А с┤Ас┤Л╩Щс┤А╩А ╩Щс┤А╩Щ╩П ╩Щс┤П╩Я╩Яс┤З с┤Ес┤З╔кс┤Л╩Ьс┤П с┤Ыс┤Пс┤Нс┤А╩А с┤Зс┤Лс┤Е╔к╔┤ ╔┤с┤Ас┤Л╔к с┤Ас┤Н╩А 10 с┤Е╔к╔┤ЁЯШТ", "╔к'с┤Н ╩Ьс┤З╩Ас┤З с┤Кс┤Ьsс┤Ы ╥Ус┤П╩А ╩Пс┤Пс┤Ь, sс┤П ╩Яс┤Зс┤Ы's с┤Д╩Ьс┤Ас┤Ы! ЁЯдЦЁЯТм", "с┤З╔к ╩Щс┤П╩Яс┤Пс┤Е с┤Л╔к ╩Щс┤П╩Я╩Щ╔к ╩Щс┤П╩Я ЁЯШ╛", "╩Ьс┤З╩П, с┤Дс┤Ьс┤Ы╔кс┤З! с┤б╩Ьс┤Ас┤Ы's с┤Ьс┤Ш ? ЁЯШК", "с┤Ыс┤П╩Ас┤З с┤Нс┤А╩Ас┤А╩А с┤Ш╩А╔кс┤Шс┤А╩Ас┤Зs╩Ь╔┤ ╔┤╔кс┤Д╩Ь╔к ЁЯШМ", "╩Щс┤П╩Яс┤П ╩Щс┤А╩Щс┤Ь, с┤Ыс┤Ьс┤Н╔к с┤Л╔к с┤Ас┤Нс┤Ас┤Лс┤З ╩Щ╩Ьс┤А╩Яс┤П╩Щс┤Аsс┤П? ЁЯШШ", "╩Пс┤Пс┤Ь'╩Ас┤З ╩Яс┤Пс┤Пс┤Л╔к╔┤╔в с┤А╩Щsс┤П╩Яс┤Ьс┤Ыс┤З╩Я╩П с┤Ас┤Ес┤П╩Ас┤А╩Щ╩Яс┤З с┤Ыс┤Пс┤Ес┤А╩П! ЁЯе░", "╩Пс┤Пс┤Ь'╩Ас┤З с┤Аs sс┤бс┤Зс┤Зс┤Ы с┤Аs с┤Д╩Ьс┤Пс┤Дс┤П╩Яс┤Ас┤Ыс┤З! ЁЯНл", "тЬи с┤Ыс┤П╩А sс┤Ас┤Ы╩Ьс┤З с┤Лс┤Пс┤Ы╩Ьс┤А ╔┤с┤А╔к с┤Лс┤А╩Ас┤П╔┤ с┤Ыс┤Ь╔к с┤П╔┤с┤Л ╩Яс┤Ьс┤Дс┤Д╩Ьс┤А ЁЯТФ", "- с┤Д╩Ьс┤П╩Яс┤П с┤Д╩Ьс┤П╩Яс┤З с┤Кс┤А╔к ╩Щ╔кс┤Ес┤Зss╩Ьс┤З", "с┤Д╩Ьс┤Ьс┤Ш с┤Д╩Ьс┤Ас┤Ш с┤Ш╩Ас┤Пс┤Шс┤Пsс┤З с┤Лс┤П╩А с┤Ас┤Нс┤А╩Ас┤ЗЁЯлв"];
            if (!arr) {
                await api.sendMessage(randomReplies[Math.floor(Math.random() * randomReplies.length)], event.threadID, (error, info) => {
                    if (!info) message.reply("info obj not found");
                    global.GoatBot.onReply.set(info.messageID, {
                        commandName: this.config.name,
                        type: "reply",
                        messageID: info.messageID,
                        author: event.senderID
                    });
                }, event.messageID);
                return;
            }
            const a = (await axios.get(`${await baseApiUrl()}/baby?text=${encodeURIComponent(arr)}&senderID=${event.senderID}`)).data.reply;
            await api.sendMessage(a, event.threadID, (error, info) => {
                global.GoatBot.onReply.set(info.messageID, {
                    commandName: this.config.name,
                    type: "reply",
                    messageID: info.messageID,
                    author: event.senderID,
                    a
                });
            }, event.messageID);
        }
    } catch (err) {
        return api.sendMessage(`Error: ${err.message}`, event.threadID, event.messageID);
    }
};
